{"version":3,"sources":["config/config.js","config/WalletButton.js","App.js","reportWebVitals.js","config/useEagerConnect.js","index.js"],"names":["MetaMaskconnector","InjectedConnector","supportedChainIds","WalletButton","useWeb3React","active","activate","account","error","useEffect","localStorage","setItem","handleConnectMetaMask","useCallback","className","slice","substring","onClick","App","mintContract","useState","address","setAddress","price","setPrice","gas","setGas","fee","setFee","library","length","includes","eth","Contract","nft","console","log","mint","a","_amountOfEther","methods","publicsaleAngel","send","from","value","type","placeholder","onChange","e","target","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MetamaskProvider","children","networkActive","networkError","activateNetwork","setLoaded","shouldEagerConnect","getItem","isAuthorized","catch","ReactDOM","render","getLibrary","provider","Web3","document","getElementById"],"mappings":"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","file":"static/js/main.75777869.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\n\r\nexport const MetaMaskconnector = new InjectedConnector({ supportedChainIds: [1, 4] });\r\n\r\nexport const getLibrary = provider => {\r\n  return new Web3(provider);\r\n}","import { useEffect, useState, useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { MetaMaskconnector } from './config';\r\n\r\nconst WalletButton = () => {\r\n\r\n  const { active, activate, account, error } = useWeb3React()\r\n  useEffect(() => {\r\n    if (active) {\r\n      localStorage.setItem('shouldEagerConnect', true)\r\n    }\r\n  }, [active])\r\n  \r\n  const handleConnectMetaMask = useCallback(() => {\r\n    activate(MetaMaskconnector)\r\n  },[activate])\r\n\r\n  return (\r\n    <button className=\"wallet-btn\"> \r\n      {active? <div>{`${account.slice(0, -36)}...${account.substring(37)}`}</div>:<div className=\"\" onClick={handleConnectMetaMask}>CONNECT</div>}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default WalletButton","import './App.css';\nimport { useState, useEffect } from 'react'\nimport WalletButton from './config/WalletButton'\nimport { useWeb3React } from \"@web3-react/core\";\nimport nft from \"./config/nft.json\"\n\nfunction App() {\n  const [address, setAddress] = useState('')\n  const [price, setPrice] = useState(0.003)\n  const [gas, setGas] = useState(0)\n  const [fee, setFee] = useState(0)\n  const { active, account, library } = useWeb3React();\n  let mintContract;\n  let amount = 1;\n  useEffect(() => {\n    if(address.length === 42 && address.includes(\"0x\") && library && active) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      mintContract = new library.eth.Contract(nft, address);\n      console.log(\"mintContract\", mintContract)\n    }\n  }, [address]);\n\n\n  const handleAddress = (e) => {\n    setAddress(e.target.value);\n  };\n  const handlePrice = (e) => {\n    setPrice(Number(e.target.value));\n  };\n  const handleGas = (e) => {\n    setGas(Number(e.target.value));\n  };\n  const handleFee = (e) => {\n    setFee(e.target.value);\n  };\n  const mint = async () => {\n    const _amountOfEther = price * 1000000000000000000;\n    try {\n      if(active) {\n        await mintContract.methods.publicsaleAngel(amount).send({from:account, gas: 15000 * 1000000000, value: _amountOfEther})\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className=\"container\">\n      <div className='nav-bar'>\n        <div className='title'>Scheduled NFT mint page</div>\n        <WalletButton/>\n      </div>\n      <div className='form'>\n        <div className='row'>\n          <div className='item'>\n            <label>Contract*</label>\n            <input type=\"text\" placeholder='0x6E962411f2cd5f312c4bAf565567840384596547' value={address} onChange={handleAddress}/>\n          </div>\n          <div className='item'>\n            <label>Price in Eth*</label>\n            <input type=\"number\" placeholder='input price' value={price} onChange={handlePrice}/>\n          </div>\n          <div className='item'>\n            <label>Max Gas(Gwei)*</label>\n            <input type=\"number\" placeholder='please gas' value={gas} onChange={handleGas}/>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='item'>\n            <label>Function Name*</label>\n            <select className=\"\" >\n              <option value=\"publicsaleAngel\">publicsaleAngel</option>\n            </select>\n          </div>\n          <div className='item'>\n            <label>Priority Fee(Gwei)*</label>\n            <input type=\"number\" placeholder='please input your contract address' value={fee} onChange={handleFee}/>\n          </div>\n          <div className='item' onClick={mint}>\n            <button>mint</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { React, useEffect, useState } from \"react\";\r\nimport { MetaMaskconnector } from \"./config\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nfunction MetamaskProvider({ children }) {\r\n  const {\r\n    active: networkActive,\r\n    error: networkError,\r\n    activate: activateNetwork,\r\n  } = useWeb3React();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const shouldEagerConnect = localStorage.getItem(\"shouldEagerConnect\");\r\n  useEffect(() => {\r\n    if (shouldEagerConnect === \"true\") {\r\n      MetaMaskconnector.isAuthorized()\r\n        .then((isAuthorized) => {\r\n          setLoaded(true);\r\n          if (isAuthorized && !networkActive && !networkError) {\r\n            activateNetwork(MetaMaskconnector);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setLoaded(true);\r\n        });\r\n    }\r\n  }, [shouldEagerConnect]);\r\n\r\n  return children;\r\n}\r\n\r\nexport default MetamaskProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { getLibrary } from './config/config'\nimport MetamaskProvider from './config/useEagerConnect'\n\nReactDOM.render(\n  <Web3ReactProvider getLibrary={getLibrary}>\n      <MetamaskProvider>\n        <App />\n      </MetamaskProvider>\n    </Web3ReactProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}